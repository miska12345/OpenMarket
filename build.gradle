buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.13'
    }
}

plugins {
    id 'java'
    id 'jacoco'
    id 'java-library'
    id "com.google.protobuf" version "0.8.13"
    id "idea"
}

group 'io.openmarket'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()

    maven {
        name "DynamoDB Local Release Repository - US West (Oregon) Region"
        url "https://s3-us-west-2.amazonaws.com/dynamodb-local/release"
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

    compile 'com.google.dagger:dagger:2.4'
    annotationProcessor "com.google.dagger:dagger-compiler:2.4"

    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.3'

    implementation 'io.grpc:grpc-netty-shaded:1.32.1'
    implementation 'io.grpc:grpc-protobuf:1.32.1'
    implementation 'io.grpc:grpc-stub:1.32.1'
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53' // necessary for Java 9+

    compile 'com.google.dagger:dagger:2.4'
    annotationProcessor "com.google.dagger:dagger-compiler:2.4"

    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.3'

    implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.859')
    implementation 'com.amazonaws:aws-java-sdk-s3'
    implementation 'com.amazonaws:aws-java-sdk-dynamodb'
    implementation 'com.amazonaws:aws-java-sdk-sqs'
    implementation 'com.amazonaws:aws-java-sdk-ses'

    implementation("com.google.guava:guava:29.0-jre")

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testCompile "org.mockito:mockito-core:2.+"
    // https://mvnrepository.com/artifact/com.amazonaws/DynamoDBLocal
    testCompile group: 'com.amazonaws', name: 'DynamoDBLocal', version: '1.13.3'
    testCompile group: 'com.almworks.sqlite4java', name: 'sqlite4java', version: '0.282'

}

protobuf {
    protoc {
        // The version of protoc must match protobuf-java. If you don't depend on
        // protobuf-java directly, you will be transitively depending on the
        // protobuf-java version that grpc depends on.
        artifact = "com.google.protobuf:protoc:3.6.0"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.32.1'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
}

idea {
    module {
        sourceDirs += file("${projectDir}/src/generated/main/java");
        sourceDirs += file("${projectDir}/src/generated/main/grpc");
    }
}

// Define the packages that should be excluded from JaCoCo.
// For example, to exclude a package called 'a', add '**/a/**'.
def excludeFromCoverage = ['**/model/*', '**/dao/*']

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled false
        csv.enabled false
    }
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludeFromCoverage)
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'PACKAGE'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
        }
    }
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludeFromCoverage)
        })
    }
}

task coverage {
    dependsOn 'jacocoTestReport'
    dependsOn 'jacocoTestCoverageVerification'
    tasks.findByName('jacocoTestCoverageVerification').mustRunAfter 'jacocoTestReport'
}

test {
    useJUnitPlatform()
    jacoco {
        excludes = excludeFromCoverage
    }
    systemProperty("sqlite4java.library.path", "lib")
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification
